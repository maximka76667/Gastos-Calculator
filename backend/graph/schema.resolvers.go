package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"gastos-counter-api/graph/helpers"
	"gastos-counter-api/graph/model"
)

// User is the resolver for the user field.
func (r *expenseResolver) User(ctx context.Context, obj *model.Expense) (*model.User, error) {
	return helpers.GetUserByID(r.DB, obj.UserId)
}

// Group is the resolver for the group field.
func (r *expenseResolver) Group(ctx context.Context, obj *model.Expense) (*model.Group, error) {
	return helpers.GetGroupById(r.DB, obj.GroupId)
}

// Members is the resolver for the members field.
func (r *groupResolver) Members(ctx context.Context, obj *model.Group) ([]*model.User, error) {
	return helpers.GetUsersByGroupId(r.DB, obj.ID)
}

// User is the resolver for the user field.
func (r *groupUserResolver) User(ctx context.Context, obj *model.GroupUser) (*model.User, error) {
	return helpers.GetUserByID(r.DB, obj.UserId)
}

// Group is the resolver for the group field.
func (r *groupUserResolver) Group(ctx context.Context, obj *model.GroupUser) (*model.Group, error) {
	return helpers.GetGroupById(r.DB, obj.GroupId)
}

// Role is the resolver for the role field.
func (r *groupUserResolver) Role(ctx context.Context, obj *model.GroupUser) (*model.Role, error) {
	return helpers.GetRoleById(r.DB, obj.RoleId)
}

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, user model.CreateUserInput) (*model.User, error) {
	return helpers.AddUser(r.DB, user)
}

// EditUser is the resolver for the editUser field.
func (r *mutationResolver) EditUser(ctx context.Context, id string, user model.EditUserInput) (*model.User, error) {
	return helpers.EditUser(r.DB, id, user)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	return helpers.DeleteUser(r.DB, id)
}

// AddGroup is the resolver for the addGroup field.
func (r *mutationResolver) AddGroup(ctx context.Context, group model.CreateGroupInput) (*model.Group, error) {
	return helpers.AddGroup(r.DB, group)
}

// EditGroup is the resolver for the editGroup field.
func (r *mutationResolver) EditGroup(ctx context.Context, id string, group model.EditGroupInput) (*model.Group, error) {
	return helpers.EditGroup(r.DB, id, group)
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*model.Group, error) {
	return helpers.DeleteGroup(r.DB, id)
}

// AddExpense is the resolver for the addExpense field.
func (r *mutationResolver) AddExpense(ctx context.Context, expense model.CreateExpenseInput) (*model.Expense, error) {
	return helpers.AddExpense(r.DB, expense)
}

// EditExpense is the resolver for the editExpense field.
func (r *mutationResolver) EditExpense(ctx context.Context, id string, expense model.EditExpenseInput) (*model.Expense, error) {
	return helpers.EditExpense(r.DB, id, expense)
}

// DeleteExpense is the resolver for the deleteExpense field.
func (r *mutationResolver) DeleteExpense(ctx context.Context, id string) (*model.Expense, error) {
	return helpers.DeleteExpense(r.DB, id)
}

// AddRole is the resolver for the addRole field.
func (r *mutationResolver) AddRole(ctx context.Context, role model.CreateRoleInput) (*model.Role, error) {
	return helpers.AddRole(r.DB, role)
}

// EditRole is the resolver for the editRole field.
func (r *mutationResolver) EditRole(ctx context.Context, id string, role model.EditRoleInput) (*model.Role, error) {
	return helpers.EditRole(r.DB, id, role)
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (*model.Role, error) {
	return helpers.DeleteRole(r.DB, id)
}

// AddGroupUser is the resolver for the addGroupUser field.
func (r *mutationResolver) AddGroupUser(ctx context.Context, groupUser model.CreateGroupUserInput) (*model.GroupUser, error) {
	return helpers.AddGroupUser(r.DB, groupUser)
}

// EditGroupUser is the resolver for the editGroupUser field.
func (r *mutationResolver) EditGroupUser(ctx context.Context, groupID string, userID string, groupUser model.EditGroupUserInput) (*model.GroupUser, error) {
	return helpers.EditGroupUser(r.DB, groupID, userID, groupUser)
}

// DeleteGroupUser is the resolver for the deleteGroupUser field.
func (r *mutationResolver) DeleteGroupUser(ctx context.Context, groupID string, userID string) (*model.GroupUser, error) {
	return helpers.DeleteGroupUser(r.DB, groupID, userID)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return helpers.GetUsers(r.DB)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return helpers.GetUserByID(r.DB, id)
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context) ([]*model.Group, error) {
	return helpers.GetGroups(r.DB)
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*model.Group, error) {
	return helpers.GetGroupById(r.DB, id)
}

// Expenses is the resolver for the expenses field.
func (r *queryResolver) Expenses(ctx context.Context) ([]*model.Expense, error) {
	return helpers.GetExpenses(r.DB)
}

// ExpensesByGroup is the resolver for the expensesByGroup field.
func (r *queryResolver) ExpensesByGroup(ctx context.Context, groupID string) ([]*model.Expense, error) {
	return helpers.GetExpensesByGroupId(r.DB, groupID)
}

// ExpensesByUser is the resolver for the expensesByUser field.
func (r *queryResolver) ExpensesByUser(ctx context.Context, userID string) ([]*model.Expense, error) {
	return helpers.GetExpensesByUserId(r.DB, userID)
}

// Expense is the resolver for the expense field.
func (r *queryResolver) Expense(ctx context.Context, groupID string, userID string) (*model.Expense, error) {
	return helpers.GetExpense(r.DB, groupID, userID)
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*model.Role, error) {
	return helpers.GetRoles(r.DB)
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*model.Role, error) {
	return helpers.GetRoleById(r.DB, id)
}

// GroupUsers is the resolver for the groupUsers field.
func (r *queryResolver) GroupUsers(ctx context.Context) ([]*model.GroupUser, error) {
	return helpers.GetGroupUsers(r.DB)
}

// GroupUsersByGroup is the resolver for the groupUsersByGroup field.
func (r *queryResolver) GroupUsersByGroup(ctx context.Context, groupID string) ([]*model.GroupUser, error) {
	return helpers.GetGroupUsersByGroup(r.DB, groupID)
}

// GroupUsersByUser is the resolver for the groupUsersByUser field.
func (r *queryResolver) GroupUsersByUser(ctx context.Context, userID string) ([]*model.GroupUser, error) {
	return helpers.GetGroupUsersByUser(r.DB, userID)
}

// GroupUser is the resolver for the groupUser field.
func (r *queryResolver) GroupUser(ctx context.Context, groupID string, userID string) (*model.GroupUser, error) {
	return helpers.GetGroupUser(r.DB, groupID, userID)
}

// Role is the resolver for the role field.
func (r *userResolver) Role(ctx context.Context, obj *model.User, groupID string) (*model.Role, error) {
	return helpers.GetRole(r.DB, obj.ID, groupID)
}

// ParticipatesIn is the resolver for the participatesIn field.
func (r *userResolver) ParticipatesIn(ctx context.Context, obj *model.User) ([]*model.Group, error) {
	return helpers.GetGroupsByUserId(r.DB, obj.ID)
}

// Expense returns ExpenseResolver implementation.
func (r *Resolver) Expense() ExpenseResolver { return &expenseResolver{r} }

// Group returns GroupResolver implementation.
func (r *Resolver) Group() GroupResolver { return &groupResolver{r} }

// GroupUser returns GroupUserResolver implementation.
func (r *Resolver) GroupUser() GroupUserResolver { return &groupUserResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type expenseResolver struct{ *Resolver }
type groupResolver struct{ *Resolver }
type groupUserResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
